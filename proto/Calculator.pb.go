// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Calculator.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Req struct {
	Params               map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2eacc2b575c1602, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type Rep struct {
	Result               map[string]string `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Rep) Reset()         { *m = Rep{} }
func (m *Rep) String() string { return proto.CompactTextString(m) }
func (*Rep) ProtoMessage()    {}
func (*Rep) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2eacc2b575c1602, []int{1}
}

func (m *Rep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rep.Unmarshal(m, b)
}
func (m *Rep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rep.Marshal(b, m, deterministic)
}
func (m *Rep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rep.Merge(m, src)
}
func (m *Rep) XXX_Size() int {
	return xxx_messageInfo_Rep.Size(m)
}
func (m *Rep) XXX_DiscardUnknown() {
	xxx_messageInfo_Rep.DiscardUnknown(m)
}

var xxx_messageInfo_Rep proto.InternalMessageInfo

func (m *Rep) GetResult() map[string]string {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Req)(nil), "calculator.Req")
	proto.RegisterMapType((map[string]string)(nil), "calculator.Req.ParamsEntry")
	proto.RegisterType((*Rep)(nil), "calculator.Rep")
	proto.RegisterMapType((map[string]string)(nil), "calculator.Rep.ResultEntry")
}

func init() { proto.RegisterFile("Calculator.proto", fileDescriptor_a2eacc2b575c1602) }

var fileDescriptor_a2eacc2b575c1602 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x70, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4a, 0x86,
	0x8b, 0x28, 0x95, 0x72, 0x31, 0x07, 0xa5, 0x16, 0x0a, 0x19, 0x73, 0xb1, 0x15, 0x24, 0x16, 0x25,
	0xe6, 0x16, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0x49, 0xeb, 0x21, 0xd4, 0xe8, 0x05, 0xa5,
	0x16, 0xea, 0x05, 0x80, 0x65, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0xa0, 0x4a, 0xa5, 0x2c, 0xb9,
	0xb8, 0x91, 0x84, 0x85, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x83, 0x40, 0x4c, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0xb0, 0x18,
	0x84, 0x63, 0xc5, 0x64, 0xc1, 0x08, 0xb1, 0xb6, 0x00, 0x64, 0x6d, 0x51, 0x6a, 0x71, 0x69, 0x4e,
	0x09, 0x76, 0x6b, 0x0b, 0xf4, 0x82, 0xc0, 0xb2, 0x50, 0x6b, 0x21, 0x4a, 0x41, 0xd6, 0x22, 0x09,
	0x93, 0x62, 0xad, 0x91, 0x3d, 0x17, 0x27, 0x2c, 0x34, 0x52, 0x85, 0x8c, 0xb8, 0x38, 0x52, 0x32,
	0xcb, 0x32, 0x8b, 0x33, 0xf3, 0xf3, 0x84, 0xf8, 0xd1, 0xfc, 0x2b, 0x85, 0x26, 0x50, 0xa0, 0xc4,
	0xa0, 0xc1, 0x68, 0xc0, 0xe8, 0xc4, 0x1e, 0xc5, 0x0a, 0x0e, 0xc3, 0x24, 0x36, 0x30, 0x65, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x07, 0x49, 0x62, 0x5e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculateClient is the client API for Calculate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculateClient interface {
	Division(ctx context.Context, opts ...grpc.CallOption) (Calculate_DivisionClient, error)
}

type calculateClient struct {
	cc *grpc.ClientConn
}

func NewCalculateClient(cc *grpc.ClientConn) CalculateClient {
	return &calculateClient{cc}
}

func (c *calculateClient) Division(ctx context.Context, opts ...grpc.CallOption) (Calculate_DivisionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculate_serviceDesc.Streams[0], "/calculator.Calculate/division", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculateDivisionClient{stream}
	return x, nil
}

type Calculate_DivisionClient interface {
	Send(*Req) error
	Recv() (*Rep, error)
	grpc.ClientStream
}

type calculateDivisionClient struct {
	grpc.ClientStream
}

func (x *calculateDivisionClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculateDivisionClient) Recv() (*Rep, error) {
	m := new(Rep)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateServer is the server API for Calculate service.
type CalculateServer interface {
	Division(Calculate_DivisionServer) error
}

// UnimplementedCalculateServer can be embedded to have forward compatible implementations.
type UnimplementedCalculateServer struct {
}

func (*UnimplementedCalculateServer) Division(srv Calculate_DivisionServer) error {
	return status.Errorf(codes.Unimplemented, "method Division not implemented")
}

func RegisterCalculateServer(s *grpc.Server, srv CalculateServer) {
	s.RegisterService(&_Calculate_serviceDesc, srv)
}

func _Calculate_Division_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculateServer).Division(&calculateDivisionServer{stream})
}

type Calculate_DivisionServer interface {
	Send(*Rep) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type calculateDivisionServer struct {
	grpc.ServerStream
}

func (x *calculateDivisionServer) Send(m *Rep) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculateDivisionServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Calculate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculate",
	HandlerType: (*CalculateServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "division",
			Handler:       _Calculate_Division_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Calculator.proto",
}
